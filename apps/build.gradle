// Gradle script to build the "apps" subproject of V-Sport

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

application {
    mainClass = 'com.github.stephengold.vsport.demo.AppChooser'
}
if (!hasProperty('mainClass')) {
    ext.mainClass = application.mainClass
}
jar.manifest.attributes('Main-Class': application.mainClass)

// Register tasks to run specific applications:

tasks.register('AppChooser', JavaExec) {
    description = 'Runs the AppChooser app.'
    mainClass = 'com.github.stephengold.vsport.demo.AppChooser'
}

// physics demos
tasks.register('ConveyorDemo', JavaExec) {
    description = 'Runs the ConveyorDemo app.'
    mainClass = 'com.github.stephengold.vsport.demo.ConveyorDemo'
}
tasks.register('NewtonsCradle', JavaExec) {
    description = 'Runs the NewtonsCradle demo app.'
    mainClass = 'com.github.stephengold.vsport.demo.NewtonsCradle'
}
tasks.register('Pachinko', JavaExec) {
    description = 'Runs the Pachinko demo app.'
    mainClass = 'com.github.stephengold.vsport.demo.Pachinko'
}
tasks.register('SplitDemo', JavaExec) {
    description = 'Runs the SplitDemo app.'
    mainClass = 'com.github.stephengold.vsport.demo.SplitDemo'
}
tasks.register('TestGearJoint', JavaExec) {
    description = 'Runs the TestGearJoint app.'
    mainClass = 'com.github.stephengold.vsport.demo.TestGearJoint'
}
tasks.register('ThousandCubes', JavaExec) {
    description = 'Runs the ThousandCubes demo app.'
    mainClass = 'com.github.stephengold.vsport.demo.ThousandCubes'
}
tasks.register('Windlass', JavaExec) {
    description = 'Runs the Windlass demo app.'
    mainClass = 'com.github.stephengold.vsport.demo.Windlass'
}

// physics tutorial apps (very simple)
tasks.register('HelloCcd', JavaExec) {
    description = 'Runs the HelloCcd tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloCcd'
}
tasks.register('HelloCharacter', JavaExec) {
    description = 'Runs the HelloCharacter tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloCharacter'
}
tasks.register('HelloContactResponse', JavaExec) {
    description = 'Runs the HelloContactResponse tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloContactResponse'
}
tasks.register('HelloCustomShape', JavaExec) {
    description = 'Runs the HelloCustomShape tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloCustomShape'
}
tasks.register('HelloDamping', JavaExec) {
    description = 'Runs the HelloDamping tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloDamping'
}
tasks.register('HelloDeactivation', JavaExec) {
    description = 'Runs the HelloDeactivation tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloDeactivation'
}
tasks.register('HelloDoor', JavaExec) {
    description = 'Runs the HelloDoor tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloDoor'
}
tasks.register('HelloDoubleEnded', JavaExec) {
    description = 'Runs the HelloDoubleEnded tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloDoubleEnded'
}
tasks.register('HelloGhost', JavaExec) {
    description = 'Runs the HelloGhost tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloGhost'
}
tasks.register('HelloJoint', JavaExec) {
    description = 'Runs the HelloJoint tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloJoint'
}
tasks.register('HelloKinematics', JavaExec) {
    description = 'Runs the HelloKinematics tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloKinematics'
}
tasks.register('HelloLimit', JavaExec) {
    description = 'Runs the HelloLimit tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloLimit'
}
tasks.register('HelloMadMallet', JavaExec) {
    description = 'Runs the HelloMadMallet tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloMadMallet'
}
tasks.register('HelloMassDistribution', JavaExec) {
    description = 'Runs the HelloMassDistribution tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloMassDistribution'
}
tasks.register('HelloMinkowski', JavaExec) {
    description = 'Runs the HelloMinkowski tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloMinkowski'
}
tasks.register('HelloMotor', JavaExec) {
    description = 'Runs the HelloMotor tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloMotor'
}
tasks.register('HelloNewHinge', JavaExec) {
    description = 'Runs the HelloNewHinge tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloNewHinge'
}
tasks.register('HelloNonUniformGravity', JavaExec) {
    description = 'Runs the HelloNonUniformGravity tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloNonUniformGravity'
}
tasks.register('HelloRigidBody', JavaExec) {
    description = 'Runs the HelloRigidBody tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloRigidBody'
}
tasks.register('HelloServo', JavaExec) {
    description = 'Runs the HelloServo tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloServo'
}
tasks.register('HelloSport', JavaExec) {
    description = 'Runs the HelloSport tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloSport'
}
tasks.register('HelloSpring', JavaExec) {
    description = 'Runs the HelloSpring tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloSpring'
}
tasks.register('HelloStaticBody', JavaExec) {
    description = 'Runs the HelloStaticBody tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloStaticBody'
}
tasks.register('HelloVehicle', JavaExec) {
    description = 'Runs the HelloVehicle tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloVehicle'
}
tasks.register('HelloWalk', JavaExec) {
    description = 'Runs the HelloWalk tutorial app.'
    mainClass = 'com.github.stephengold.vsport.tutorial.HelloWalk'
}

// graphics-only tests (no physics)
tasks.register('AssimpTest', JavaExec) {
    description = 'Runs the Assimp test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.AssimpTest'
}
tasks.register('CheckerboardTest', JavaExec) {
    description = 'Runs the checkerboard test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.CheckerboardTest'
}
tasks.register('HelloVSport', JavaExec) {
    description = 'Runs the HelloVSport test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.HelloVSport'
}
tasks.register('MouseTest', JavaExec) {
    description = 'Runs the first mouse test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.MouseTest'
}
tasks.register('MouseTest2', JavaExec) {
    description = 'Runs the 2nd mouse test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.MouseTest2'
}
tasks.register('OctasphereTest', JavaExec) {
    description = 'Runs the octasphere test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.OctasphereTest'
}
tasks.register('SpriteTest', JavaExec) {
    description = 'Runs the sprite test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.SpriteTest'
}
tasks.register('TextureTest', JavaExec) {
    description = 'Runs the texture test app.'
    enableAssertions = true
    mainClass = 'com.github.stephengold.vsport.test.TextureTest'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
Boolean includeLinux = os.isLinux()
Boolean includeMacOsX = os.isMacOsX()
Boolean includeWindows = os.isWindows()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (os.isMacOsX()) {
        jvmArgs '-XstartOnFirstThread' // required for GLFW on macOS
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions = true
}

dependencies {
    // LWJGL's Vulkan bindings do not require natives, except on macOS.
    if (includeLinux) {
        runtimeOnly(variantOf(libs.libbulletjme.linux64){ classifier(bft) })
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.shaderc){classifier("natives-linux")})

        runtimeOnly(variantOf(libs.libbulletjme.linuxarm64){ classifier(bft) })
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.shaderc){classifier("natives-linux-arm64")})
    }

    if (includeMacOsX) {
        runtimeOnly(variantOf(libs.libbulletjme.macosx64){ classifier(bft) })
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.shaderc){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.vulkan){classifier("natives-macos")})

        runtimeOnly(variantOf(libs.libbulletjme.macosxarm64){ classifier(bft) })
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.shaderc){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.vulkan){classifier("natives-macos-arm64")})
    }

    if (includeWindows) {
        runtimeOnly(variantOf(libs.libbulletjme.windows64){ classifier(bft) })
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.shaderc){classifier("natives-windows")})
    }

    //implementation 'com.github.stephengold:V-Sport:' + vsportVersion // for published library
    implementation project(':lib') // for latest sourcecode
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
